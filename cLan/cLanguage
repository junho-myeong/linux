# main()
 - 이것은 메인 함수를 말한다.
 - 모든 함수에는 타입을 지정해줘야 한다, 여기서 말하는 함수란 이 함수를 실행후 리턴되는 값에 타입으로써 이 함수를 실행후 리턴되는 값으로 다른 함수 또는 명령어에서 사용하기 위함이다.

# 변수
 - 변수를 선언함과 동시에 그 변수에 할당되는 주소가 주어진다.

# write() - 헤더 파일은 unitd
 - c에서 제공하는 기본 시스템이다.
 - 여기서는 기본 output으로 사용할 것이다.
 * 파라미터
 - 1. 파일 해석기 : int fileds(여기서1은 표준의 output을 말한다.)
 - 2. 출력하고 싶은 문자 : const void *buf
 - 3. 출력하고 싶은 문자의 개수 



# 파라미터
 - 파라미터에 값이 넘어 오면 그 값은 변수에 저장이 되고,
 - 우리가 함수 내부에서 사용할때는 그 변수 자체에 접근 하는 것이 아니고 그 주소에 접근하는것이다.

# 파라미터 () vs (void)
 - c++에서는 상관없지만
 - c에서는 void 인 경우만 해당 함수가 파라미터가 없다고 인식하고
 - ()인경우에는 variable arguments로 인식한다. 즉 가변인자가 되어서 들어올 타입의 타입이나 개수가 정해지지 않은 함수가 됨을 의미한다
 - 파라미터에서 넘어온 값은 &(엠퍼센드)를 이용해서 접근이 가능하다
 - 단, 함수 내부에 변수는 엠퍼센드 없이 그냥 사용 가능하다

# 프로토타입
 - 사용자 정의함수를 프로토 타입이라고 부른다.

# 헤더파일
unistd.h  :  보통 Unix 에 쓰이는 표준 심볼들과 상수들을 정의해 놓은 헤더파일입니다.

                따라서 unistd.h에 포함되어 있는 내용은 대부분 유닉스환경에서만 쓸수 있는 것들이죠..

                예를들면 fork라던가, getuid, setuid등등.. 윈도우 환경에서는 사용할 수 없는 함수들입니다.

stdio.h : 콘솔 입출력에 관한 함수 정보를 갖고 있습니다.

stdlib.h : 비교적 많이 쓰이는 함수에 대한 정보를 갖고 있습니다. (malloc 이라든지 atoi 라든지)

math.h : 수학적인 연산을 사용하는 함수를 사용할 때. ( 사인, 코싸인 함수 같은...)

time.h : 시간에 관한 함수를 사용해야 할 때. (time() 등)

alloc.h : 메모리 할당에 관련된 헤더파일

assert.h : assert란 매크로를 사용하려면 사전에 링크해줘야 합니다 assert.. 참으로 편한 매크로죠 ^^;

bios.h : 도스 시절 인터럽트에 관한 조작을 할때 썼던 기억이 가물가물합니다만..

conio.h : 콘솔 입출력에 관한 헤더파일. 한문자 입력받는 getch();나 한문장 입력받는 getchar();는 이 헤더를 인클루드해줘야합니다

ctype.h : int형이나 char형을 unsigned int나 unsigned char형으로 재정의해놓은 헤더같아 보입니다
             한번 열어보면 확인할수 있는데 왜 이리도 귀찮은지 -_-;

dos.h : 역시 도스 시절 인터럽트에 관련

errno.h : 리턴된 에러값이 정의되어있었던걸로 기억

fcntl.h : 파일조작 함수를 사용할때 넘어가는 값이 정의되어 있음

graphics.h : 도스 시절 그래픽 출력하는 함수를 사용할때 인클루드

io.h : 기본 적인 입출력

iostream.h : cin, cout등등 쓰려면 인클루드 필수

limits.h : char형이나 int형의 최대크기기가 있었던걸로 기억

malloc.h : 메모리 할당에 관련된 헤더 파일

math.h : sin cos tan 기타 등등 수학 관련 함수 사용시

stdarg.h : 가변 인자 리스트를 사용할때 인클루드 필수

stdio.h : 알것이라고 믿음

stdlib.h : 기본적인 라이브러리

string.h : 문자열 라이브러리

time.h : 시간에 관련된거.. rand()함수 쓸때 인클루드 해줘야 했던걸로 기억

# 포인터
 - 포인터는 주소를 담기위해 선언되는것이다.
 - 즉 포인터는 주소를 담아서 다른것을 가르켜야 그 가르킨 값을 출력 하거나 가공할수잇다.
 - 즉 포인터에 담긴 주소 값에 접근해서 값을 변경하거나 할순없다.







int a = 2;
a+1; //3
print(a)//2



